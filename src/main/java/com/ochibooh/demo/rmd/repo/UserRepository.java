package com.ochibooh.demo.rmd.repo;import com.ochibooh.demo.rmd.model.User;import com.ochibooh.demo.rmd.utils.LogExecutionTime;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.lang.NonNull;import org.springframework.stereotype.Repository;import javax.transaction.Transactional;import java.util.Optional;@Repositorypublic interface UserRepository extends JpaRepository<User, Long> {    @LogExecutionTime    Optional<User> findByEmail(@NonNull String e);    @LogExecutionTime    @Query(value = "select * from CONFIG_USER as c where c.EMAIL = ?1", nativeQuery = true)    Optional<User> getUserUsingEmailNative(@NonNull String email);    @LogExecutionTime    @Query(value = "select c from User c where c.email = :myEmail")    Optional<User> getUserUsingEmailNotNative(@Param (value = "myEmail") @NonNull String email);    @LogExecutionTime    @Query(value = "select c from User c where c.email = :myEmail")    User getUserUsingEmailNotNative2(@Param (value = "myEmail") @NonNull String email);    @LogExecutionTime    @Transactional    @Modifying    @Query(value = "update CONFIG_USER set FIRST_NAME = ?1 where EMAIL = ?2", nativeQuery = true)    void updateUserNative(@NonNull String firstName, @NonNull String email);    @LogExecutionTime    @Transactional    @Modifying    @Query(value = "update User c set c.firstName = :firstName where c.email = :email")    void updateUserNotNative(@Param (value = "email") @NonNull String email, @Param (value = "firstName") @NonNull String firstName);}