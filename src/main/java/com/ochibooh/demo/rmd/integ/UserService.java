package com.ochibooh.demo.rmd.integ;import com.ochibooh.demo.rmd.model.Role;import com.ochibooh.demo.rmd.model.User;import com.ochibooh.demo.rmd.model.UserRole;import com.ochibooh.demo.rmd.repo.RoleRepository;import com.ochibooh.demo.rmd.repo.UserRepository;import com.ochibooh.demo.rmd.repo.UserRoleRepository;import lombok.extern.java.Log;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.lang.NonNull;import org.springframework.security.access.annotation.Secured;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.concurrent.atomic.AtomicBoolean;import java.util.concurrent.atomic.AtomicReference;import java.util.logging.Level;@Log@Servicepublic class UserService {    @Autowired    private PasswordEncoder passwordEncoder;    @Autowired    private UserRepository userRepository;    @Autowired    private RoleRepository roleRepository;    @Autowired    private UserRoleRepository userRoleRepository;    public List<Role> validateUser(@NonNull String email, @NonNull String password) {        List<Role> roles = new ArrayList<>();        this.userRepository.findByEmail(email.trim().toLowerCase()).ifPresent(user -> {            if (user.getStatus().compareTo(1) == 0) {                roles.addAll(this.userRoles(user, true));            }        });        return roles;    }    @Secured(value = {"CREATE_USER"})    public boolean createUser(@NonNull String firstName, String lastName, @NonNull String email, @NonNull String password, @NonNull Long roleId) {        AtomicBoolean res = new AtomicBoolean();        this.roleRepository.findById(roleId).ifPresentOrElse(role -> {            if (role.getStatus().compareTo(1) == 0) {                this.userRepository.findByEmail(email.trim().toLowerCase()).ifPresentOrElse(user -> {                }, () -> {                    AtomicReference<User> user = new AtomicReference<>(new User());                    user.get().setEmail(email.trim().toLowerCase());                    user.get().setFirstName(firstName.trim());                    if (lastName != null && !lastName.isEmpty()) {                        user.get().setLastName(lastName.trim());                    }                    user.get().setPassword(this.passwordEncoder.encode(password));                    user.get().setStatus(1);                    user.set(this.userRepository.save(user.get()));                    log.log(Level.INFO, String.format("User created [ %s ]", user.get()));                    if (this.assignRole(user.get(), role, true)) {                        log.log(Level.INFO, String.format("User assigned role [ %s ]", user.get()));                    }                    res.set(true);                });            } else {                /* todo:: role not active. 1 - active  */            }        }, () -> {            /* todo:: role not found  */        });        return res.get();    }    @Secured(value = {"CREATE_USER", "ASSIGN_ROLE"})    public boolean assignRole(@NonNull User user, @NonNull Role role, boolean activate) {        AtomicBoolean res = new AtomicBoolean();        this.userRepository.findById(user.getId()).ifPresentOrElse(userData -> {            if (userData.getStatus().compareTo(1) == 0) {                this.roleRepository.findById(role.getId()).ifPresentOrElse(myRole -> {                    if (myRole.getStatus().compareTo(1) == 0) {                        this.userRoleRepository.findByUserAndRole(userData, myRole).ifPresentOrElse(ur -> {                            AtomicReference<UserRole> userRole = new AtomicReference<>(ur);                            if (activate) {                                userRole.get().setStatus(1); /* 1 - activate */                            } else {                                userRole.get().setStatus(2); /* 2 - disabled */                            }                            userRole.set(this.userRoleRepository.save(userRole.get()));                            log.log(Level.INFO, String.format("User role deactivated [ %s ]", userRole.get()));                            res.set(true);                        }, () -> {                            if (activate) {                                AtomicReference<UserRole> userRole = new AtomicReference<>(new UserRole());                                userRole.get().setUser(userData);                                userRole.get().setRole(myRole);                                userRole.get().setStatus(1);                                userRole.set(this.userRoleRepository.save(userRole.get()));                                log.log(Level.INFO, String.format("User role created [ %s ]", userRole.get()));                                res.set(true);                            }                        });                    }                }, () -> {                    /* todo:: role not found  */                });            }        }, () -> {            /* todo :: user not found */        });        return res.get();    }    public List<Role> userRoles(@NonNull User user, boolean activeOnly) {        if (activeOnly) {            return this.userRoleRepository.findAllByUser(user).stream().map(UserRole::getRole).toList();        } else {            return this.userRoleRepository.findAllByUserAndStatus(user, 1).stream().map(UserRole::getRole).toList();        }    }}