package com.ochibooh.demo.rmd.integ;import com.ochibooh.demo.rmd.data.role.RoleAccessRight;import com.ochibooh.demo.rmd.model.Role;import com.ochibooh.demo.rmd.repo.RoleRepository;import lombok.extern.java.Log;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.lang.NonNull;import org.springframework.stereotype.Service;import java.util.Arrays;import java.util.List;import java.util.concurrent.atomic.AtomicBoolean;import java.util.concurrent.atomic.AtomicReference;import java.util.logging.Level;@Log@Servicepublic class RoleService {    @Autowired    private RoleRepository roleRepository;    public enum AccessRight {        VIEW_USER("View user"),        CREATE_USER("Create user"),        UPDATE_USER("Update user"),        ACTIVATE_USER("Activate user"),        DEACTIVATE_USER("Deactivate user"),        ASSIGN_ROLE("Assign role");        private final String name;        AccessRight(String name) {            this.name = name;        }    }    public List<RoleAccessRight> accessRights() {        return Arrays.stream(AccessRight.values())                .map(s -> RoleAccessRight.builder().name(s.name).accessRight(s).build())                .toList();    }    public boolean createRole(@NonNull String name, @NonNull List<AccessRight> accessRights) {        AtomicBoolean res = new AtomicBoolean();        AtomicReference<Role> role = new AtomicReference<>(new Role());        role.get().setName(name);        role.get().setAccessRights(accessRights);        role.get().setStatus(1);        role.set(this.roleRepository.save(role.get()));        log.log(Level.INFO, String.format("Role created [ %s ]", role.get()));        res.set(true);        return res.get();    }    public boolean updateRole(@NonNull Long id, @NonNull String name, @NonNull List<AccessRight> accessRights) {        AtomicBoolean res = new AtomicBoolean();        this.roleRepository.findById(id).ifPresentOrElse(r -> {            AtomicReference<Role> role = new AtomicReference<>(r);            role.get().setName(name);            role.get().setAccessRights(accessRights);            role.set(this.roleRepository.save(role.get()));            log.log(Level.INFO, String.format("Role update [ %s ]", role.get()));            res.set(true);        }, () -> {            if (this.createRole(name, accessRights)) {                res.set(true);            }        });        return res.get();    }}