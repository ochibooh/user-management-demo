package com.ochibooh.demo.rmd.integ;import com.ochibooh.demo.rmd.model.User;import com.ochibooh.demo.rmd.repo.UserRepository;import com.ochibooh.demo.rmd.utils.SharedUtils;import lombok.extern.java.Log;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.test.context.SpringBootTest;import java.util.function.Consumer;import java.util.logging.Level;@Log@SpringBootTestpublic class UserServiceTests {    // use @Log to replace    //private final Logger log = Logger.getLogger(this.getClass().getName());    @Autowired    private User beanUser;    @Autowired    @Qualifier(value = "user2")    private User bean2User;    @Autowired    private SharedUtils sharedUtils;    @Autowired    private UserRepository userRepository;    @Test    @DisplayName(value = "Get user by email using JPA")    public void getUserJpa() {        this.userRepository.findByEmail("phelix@mail.com").ifPresentOrElse(user -> {            log.log(Level.INFO, String.format("User found [ %s ]", user));            user.setFirstName("New first name");            this.userRepository.save(user);        }, () -> {            log.log(Level.WARNING, "User not found");        });    }    @Test    @DisplayName(value = "Get user by email using Query native")    public void getUserQueryNative() {        this.userRepository.getUserUsingEmailNative("phelix@mail.com").ifPresentOrElse(user -> {            log.log(Level.INFO, String.format("User found [ %s ]", user));            this.userRepository.updateUserNative("Native First name", "phelix@mail.com");        }, () -> {            log.log(Level.WARNING, "User not found");        });        this.userRepository.getUserUsingEmailNative("phelix@mail.com").ifPresentOrElse(new Consumer<User>() {            @Override            public void accept(User user) {            }        }, new Runnable() {            @Override            public void run() {            }        });    }    @Test    @DisplayName(value = "Get user by email using Query not native")    public void getUserQueryNotNative() {        this.userRepository.getUserUsingEmailNotNative("phelix@mail.com").ifPresentOrElse(user -> {            log.log(Level.INFO, String.format("User found [ %s ]", user));            this.userRepository.updateUserNotNative("phelix@mail.com", "Not Native First name");        }, () -> {            log.log(Level.WARNING, "User not found");        });        User user = this.userRepository.getUserUsingEmailNotNative2("phelix@mail.com");        if (user != null) {            log.log(Level.INFO, String.format("User found [ %s ]", user));            this.userRepository.updateUserNotNative("phelix@mail.com", "Not Native First name");        } else {            log.log(Level.WARNING, "User not found");        }    }    @Test    @DisplayName(value = "User from Bean")    public void testBean() {        log.log(Level.INFO, String.format("User from bean [ %s ]", this.beanUser));        log.log(Level.INFO, String.format("User from bean 2 [ %s ]", this.bean2User));        log.log(Level.INFO, String.format("From component [ %s ]", this.sharedUtils.me()));    }}